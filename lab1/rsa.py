import random
from typing import List, Tuple


# —É—Ç–∏–ª–∫–∞. —Ä–µ—à–µ—Ç–æ —ç—Ä–∞—Ç–æ—Å—Ñ–µ–Ω–∞ - –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ —É–∑–Ω–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –ª–∏ —á–∏—Å–ª–æ
PRIMES = []
def eratosthenes_sieve(limit: int) -> List[int,]:
    sieve = [True] * (limit + 1)
    sieve[0] = sieve[1] = False
    for n in range(2, int(limit **.5) + 1):
        if sieve[n]:
            for m in range(n**2, limit + 1, n):
                sieve[m] = False
    primes = [n for n, is_prime in enumerate(sieve) if is_prime] # –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Å–∫–æ—É–ø—ã —Ä–∞–∑—Ä–µ—à–∞—é—Ç
    return primes

def is_prime(n):
    if not PRIMES:
        eratosthenes_sieve((int(n**.5) + 1 ) << 3) # –Ω—É –≤–¥—Ä—É–≥ –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
         
    if n < 2:
        return False

    for prime in PRIMES:
        if prime > n**.5: 
            break
        if n % prime == 0:
            return False

    return True

def gcd(a: int, b: int) -> int:
    # –Ω—É —ç—Ç–æ –±–∞–∑–∞
    while b != 0:
        a, b = b, a % b
    return a

def gcdpp(a: int, b: int) -> Tuple[int, int, int]:
    if a == 0:
        return b, 0, 1
    else:
        gcd, x1, y1 = gcdpp(b % a, a)
        x = y1 - (b // a) * x1
        y = x1
        return gcd, x, y

def multiplicative_inverse(e: int, phi: int) -> int:
    # for d in range(1, phi): # –ø–æ–∏—Ñ–≥ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, –ø–µ—Ä–µ–±–æ—Ä—á–∏–∫–æ–º –Ω–∞–π–¥–µ–º
    #     if (e * d) % phi == 1:
    #         return d
    
    # –≤–æ—Ç —Ç—É—Ç —è –ø–æ–Ω—è–ª —á—Ç–æ —á–∏—Å–µ–ª–∫–∏ 12+ –∑–Ω–∞–∫–æ–≤ –Ω–µ –æ—á–µ–Ω—å –ø—Ä–∏–∫–æ–ª—å–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å
    gcd, x, _ = gcdpp(e, phi)
    if gcd != 1:
        return -1 # –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    return x % phi


def generate_keypair(p: int, q: int) -> Tuple[Tuple[int, int], Tuple[int, int]]:
    if not (is_prime(p) and is_prime(q)):
        raise ValueError('Both numbers must be prime.')
    elif p == q:
        raise ValueError('p and q cannot be equal')

    # n:int = (p)(q) –ê –ú–ù–ï –ì–û–í–û–†–ò–õ–ò –ß–¢–û –¢–ê–ö –ú–û–ñ–ù–û, –ê –Ø –ò–ú –ì–û–í–û–†–ò–õ –ù–ê –ü–†–û–®–õ–û–ô –ü–ê–†–ï –ß–¢–û –ë–£–î–ï–¢ INT OBJ NOT CALLABLE. 
    n: int = p*q
    # PUT YOUR CODE HERE

    phi: int = (p-1)*(q-1)
    # PUT YOUR CODE HERE

    # Choose an integer e such that e and phi(n) are coprime
    e = random.randrange(1, phi)

    # Use Euclid's Algorithm to verify that e and phi(n) are comprime
    g = gcd(e, phi)
    while g != 1:
        e = random.randrange(1, phi)
        g = gcd(e, phi)

    # Use Extended Euclid's Algorithm to generate the private key
    d = multiplicative_inverse(e, phi)
    # Return public and private keypair
    # Public key is (e, n) and private key is (d, n)
    return ((e, n), (d, n))


if __name__ == "__main__":
    print(generate_keypair(234234, 45634223)) # -> –Ω—É –æ–Ω–æ —á—É—Ç—å —á—É—Ç—å –ø–æ–¥—É–º–∞–µ—Ç –∏ –≤—ã–¥–∞—Å—Ç `((2905262148217, 10689086590182), (1411982437873, 10689086590182))` –º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å —É–∂–µ –≥–æ—Ç–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –Ω–æ –º–Ω–µ –∑–∞ —ç—Ç–æ –±–∞–ª—ã –Ω–µ –¥–∞—é—Ç ü§°ü§óüòº